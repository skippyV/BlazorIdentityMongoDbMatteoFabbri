@* @page "/AuthWithPolicyDbAccess" *@

@attribute [Route("/" + AccessControlPageConstants.AuthWithPolicyDbAccess)]

@* In an attempt to limit peppering the code with the same strings, one can use the Route attribute
above to replace the string literal of the @page directive. Reference: https://github.com/dotnet/aspnetcore/issues/25589 *@

@* @attribute [Authorize(Policy = Constants.SPECIALFLAGPOLICYNAME)] WHY IS MY SpecialFlagHandler GETTING CALLED TWICE? BECAUSE I HAD SpecialFlagPolicy DECLARED TWICE IN THIS PAGE *@

<h3>AuthWithPolicyDbAccess</h3>

<AuthorizeView>
    <Authorized>
        This content is displayed only if the user is Authorized
        <p>User: @context.User.Identity!.Name</p>
    </Authorized>
    <NotAuthorized>
        This content is displayed if the user is Not Authorized
    </NotAuthorized>
</AuthorizeView>

<p>authenticated user MESSAGE: @authMessage</p>

<AuthorizeView Policy="SpecialFlagPolicy">  @* CANNOT USE 'Policy = Constants.SPECIALFLAGPOLICYNAME' HERE *@
    <Authorized>
        <p>You satisfy the SpecialFlagPolicy policy</p>
    </Authorized>
    <NotAuthorized>
        <p>You DO NOT satisfy the SpecialFlagPolicy policy!</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string authMessage = "The user is NOT authenticated.";
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }    

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} is authenticated.";
            }
            else
            {
                authMessage = "ACCESS DENIED";
            }
        }
        
    }



}
