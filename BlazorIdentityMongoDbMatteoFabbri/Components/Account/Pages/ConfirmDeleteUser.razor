@page "/Account/ConfirmDeleteUser"

@using BlazorIdentityMongoDbMatteoFabbri.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations


@inject UserManager<ApplicationUser> _UserManager
@inject NavigationManager _NavigationManager
@inject IdentityRedirectManager _RedirectManager

@attribute [AllowAnonymous]

<StatusMessage Message="@errorMessage" />

<div class="largeFont"> Test CSS Class largeFont</div>

<p>P text with no CSS class</p>
<p class="large">P text with p.large CSS class</p>


<div class="float-parent-element">
    <div class="float-child-element">
        <form @onsubmit="DeleteUser" @formname="DeleteUserForm" method="post">
            <button class="btn btn-primary">Delete User</button>
            <AntiforgeryToken />
        </form>
    </div>

    <div class="float-child-element">
        <form @onsubmit="CancelDeletion" @formname="CancelDeletionForm" method="post">
            <button class="btn btn-primary">Cancel</button>
            <AntiforgeryToken />
        </form>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? SelectedUserId { get; set; }

    private async Task DeleteUser(EventArgs args)
    {
        var usr = await _UserManager.FindByIdAsync(SelectedUserId);

        if (usr is not null)
        {
            if (HttpContext is not null && HttpContext.User.Identity.IsAuthenticated)
            {
                var currentLoggedInUserName = HttpContext.User.Identity.Name;

                if (currentLoggedInUserName.Equals(usr.UserName))
                {
                    var newUri = _NavigationManager.ToAbsoluteUri("/Account/ManageUsers").AbsoluteUri;
                    _RedirectManager.RedirectToWithStatus(newUri, $"Cannot delete user by same name ({currentLoggedInUserName}) as logged in user.", HttpContext);
                }
            }
        }

        if (usr is not null)
        {
            var newUri = _NavigationManager.ToAbsoluteUri("/Account/ManageUsers").AbsoluteUri;

            var username = usr.UserName;

            var result = await _UserManager.DeleteAsync(usr);            

            if (result.Succeeded)
            { 
                _RedirectManager.RedirectToWithStatus(newUri, $"Deleted User {username} with ID: {SelectedUserId}", HttpContext);
            }
            else
            {
                _RedirectManager.RedirectToWithStatus(newUri, $"Error deleting {username}: {result.ToString()}.", HttpContext);
            }
        }
        

    }
    private void CancelDeletion(EventArgs args)
    {
        var newUri = _NavigationManager.ToAbsoluteUri("/Account/ManageUsers").AbsoluteUri;
        _RedirectManager.RedirectToWithStatus(newUri, "", HttpContext);
    }
}