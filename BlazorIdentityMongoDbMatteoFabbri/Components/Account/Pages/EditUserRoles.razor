@page "/Account/EditUserRoles"

@using BlazorIdentityMongoDbMatteoFabbri.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject SignInManager<ApplicationUser> _SignInManager
@inject UserManager<ApplicationUser> _UserManager
@inject NavigationManager _NavigationManager
@inject IdentityRedirectManager _RedirectManager
@inject RoleManager<ApplicationRole> _RoleManager

@attribute [AllowAnonymous]

<h4>Edit Roles for User</h4>

<StatusMessage Message="@errorMessage" />

<hr />

@* 
    Note: without the below null-check for currentSelectedUser, the ABOVE
    foreach(var role in roles) gets a null reference error!! 
    Haven't been able to recreate this behavior - will remove comment on the next commit.
*@

@if(currentSelectedUser is not null)
{
    <h4>Current Roles for @currentSelectedUser.UserName</h4>

    <ul style="max-height:100px">
        @if (currentSelectedUser.Roles.Count > 0)
        {
            @foreach (var roleName in currentSelectedUser.Roles)
            {
                var testRole = _RoleManager.FindByIdAsync(roleName);
                <li>@testRole!.Result!.Name</li>
            }
        }
        else
        {
            <li>No Roles yet</li>
        }
    </ul>
}

<hr />
<h4>Add or Delete Roles for User</h4>
<div style="background-color:aquamarine; display:table">
    <div style="display:table-column;"> </div>
    <div style="display:table-column;"> </div>
    <div style="display:table-column;"> </div>

    @for (int i = 0; i < roles.Count; i++)
    {
        ApplicationRole? roleLocal = roles[i];
        disableDeleteRoleButton = false;

        if (roleLocal is not null)
        {
            if (roleLocal.Name!.Equals(Constants.SUPERADMIN))
            {
                if (!editorIsSuperAdmin)
                {
                    continue;
                }
                else
                {
                    disableDeleteRoleButton = true;
                }
            }
            else if (roleLocal.Name!.Equals(Constants.ADMIN))
            {
                if (!editorIsAdmin)
                {
                    continue; // 
                }
                if (!editorIsSuperAdmin) // SuperAdmins are also Admins by design.
                {
                    disableDeleteRoleButton = true;
                }
            }
        }

        <div style="display:table-row">
            <div style="display:table-cell">@roleLocal!.Name</div>

            <div style="display:table-cell">
                <form @onsubmit="@(() => AddRoleForUser(roleLocal))"  method="post" @formname="@($"EditUserRolesAddRoleForm_{i}")">
                    <button class="btn btn-primary">ADD</button>
                    <AntiforgeryToken />
                </form>
            </div>

            <div style="display:table-cell">
                <form @onsubmit="@(() => DeleteRoleForUser(roleLocal))" method="post" @formname="@($"EditUserRolesRemoveRoleForm_{i}")">
                    <button disabled="@disableDeleteRoleButton" class="btn btn-primary">DELETE</button>                   
                    <AntiforgeryToken />
                </form>
            </div>

        </div>
    }

</div>
<hr />
<h4>List of ALL Roles</h4>
<ul style="max-height:100px">
    @foreach (var role in roles)
    {
        <li>@role.Name</li>
    }
</ul>

@code {
    // SuperAdmins are also Admins by design.
    //
    // SuperAdmin can add user to SuperAdmin
    // SuperAdmin can not delete SuperAdmin
    // SuperAdmin can add user to Admin
    // SuperAdmin can delete Admin
    // Admin cannot delete nor add SuperAdmin
    // Admin can add user to Admin
    // Admin cannot delete Admin

    string? errorMessage;

    [CascadingParameter]
    HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? SelectedUserId { get; set; }
    ApplicationUser? currentSelectedUser = null;

    bool editorIsAdmin = false;
    bool editorIsSuperAdmin = false;
    bool disableDeleteRoleButton = false;

    List<ApplicationRole> roles = new List<ApplicationRole>();  // why declare access modifiers which are already the default? Unless it is a coding style. 
    // I'm going to start removing redundant access modifiers (e.g. removing 'private')

    protected override async Task OnInitializedAsync()
    {
        roles = _RoleManager.Roles.ToList();
        await SetCurrentSelectedUser();
    }

    async Task SetCurrentSelectedUser()
    {
        if (SelectedUserId is not null)
        {
            currentSelectedUser = await _UserManager.FindByIdAsync(SelectedUserId);
        }

        string currentUserEditorName = HttpContext.User.Identity!.Name!;

        if (currentUserEditorName is not null)
        {
            ApplicationUser? usr = await _UserManager.FindByNameAsync(currentUserEditorName);
            if (usr is not null)
            {
                IList<string> rolesOfEditor = await _UserManager.GetRolesAsync(usr);
                foreach(var role in rolesOfEditor)
                {
                    if(role.Equals(Constants.ADMIN))
                    {
                        editorIsAdmin = true;
                    }
                    if (role.Equals(Constants.SUPERADMIN))
                    {
                        editorIsSuperAdmin = true;
                    }
                }
            }
        }
    }

    async Task AddRoleForUser(ApplicationRole role)
    {
        var newUri = AddUserToURI("/Account/EditUserRoles"); // this page

        if (currentSelectedUser is not null && role is not null)
        {
            IdentityResult result = await _UserManager.AddToRoleAsync(currentSelectedUser, role.Name!);

            if (result.Succeeded)
            {
                //_RedirectManager.RedirectToCurrentPageWithStatus($"Role {role.Name} added", HttpContext);
                _RedirectManager.RedirectToWithStatus(newUri, $"Role {role.Name} ADDED", HttpContext);
            }
            else
            {
                // _RedirectManager.RedirectToCurrentPageWithStatus($"ERROR Adding Role {role.Name}: {result.ToString()}", HttpContext);
                _RedirectManager.RedirectToWithStatus(newUri, $"ERROR Adding Role {role.Name}: {result.ToString()}", HttpContext);
            }
        }
    }

    async Task DeleteRoleForUser(ApplicationRole role)
    {
        var newUri = AddUserToURI("/Account/EditUserRoles"); // this page

        if (currentSelectedUser is not null && role is not null)
        {
            IdentityResult result = await _UserManager.RemoveFromRoleAsync(currentSelectedUser, role.Name!);

            if(result.Succeeded)
            {
                // _RedirectManager.RedirectToCurrentPageWithStatus($"Role {role.Name} DELETED", HttpContext);
                _RedirectManager.RedirectToWithStatus(newUri, $"Role {role.Name} DELETED", HttpContext);
            }
            else
            {
                // _RedirectManager.RedirectToCurrentPageWithStatus($"ERROR Deleting Role {role.Name}: {result.ToString()}", HttpContext);
                _RedirectManager.RedirectToWithStatus(newUri, $"ERROR Deleting Role {role.Name}: {result.ToString()}", HttpContext);
            }
        }
    }

    string AddUserToURI(string endpoint)
    {
        var newUri = _NavigationManager.ToAbsoluteUri(endpoint).AbsoluteUri;
        newUri += "?" + $"SelectedUserId={SelectedUserId}";
        return newUri;
    }
}