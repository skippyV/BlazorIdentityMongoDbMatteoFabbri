@page "/Account/ManageUsers"

@using BlazorIdentityMongoDbMatteoFabbri.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject SignInManager<ApplicationUser> _SignInManager
@inject UserManager<ApplicationUser> _UserManager
@inject NavigationManager _NavigationManager
@inject RoleManager<ApplicationRole> _RoleManager
@inject IdentityRedirectManager _RedirectManager

@* @attribute [AllowAnonymous] *@
@attribute [Authorize(Policy = Constants.SUPERADMINPOLICYNAME)]

<h4>Admin Page for managing Users</h4>

<div style="background-color:aquamarine; display:table">
    <div style="display:table-column; background-color:yellow"> </div>
    <div style="display:table-column; background-color:yellowgreen"> </div>
    <div style="display:table-column; background-color:olivedrab"> </div>
    <div style="display:table-column; background-color:orange"> </div>
    <div style="display:table-column;"> </div>

    @for (int i = 0; i < users.Count; i++)
    {
        ApplicationUser userLocal = users[i];
        if (CheckIfUserIsSuperAdmin(userLocal))
        {
            continue;
        }
        else
        {
            <div style="display:table-row">
                <div style="display:table-cell">@userLocal.UserName</div>
                <div style="display:table-cell">@userLocal.Email</div>
                <div style="display:table-cell">
                    <form @onsubmit="@(() => EditUser(userLocal))" method="post" @formname="@($"EditFormEdit_{i}")">
                        <button class="btn btn-primary">EDIT</button>
                        <AntiforgeryToken />
                    </form>
                </div>
                <div style="display:table-cell">
                    <form @onsubmit="@(() => DeleteUser(userLocal))" method="post" @formname="@($"EditFormDelete_{i}")">
                        <button class="btn btn-primary">DELETE</button>
                        <AntiforgeryToken />
                    </form>
                </div>
                <div style="display:table-cell">
                    <form @onsubmit="@(() => EditRoles(userLocal))" method="post" @formname="@($"EditFormRoles_{i}")">
                        <button class="btn btn-primary">Edit Roles</button>
                        <AntiforgeryToken />
                    </form>
                </div>
            </div>
        }
    }
</div>



@* 
    Can I put a form inside a table?
    https://stackoverflow.com/questions/58019784/editform-within-a-table-does-not-render
    https://stackoverflow.com/questions/5967564/form-inside-a-table/5967613#5967613

    Isolated CSS is problematic for me. Perhaps due to:
    https://learn.microsoft.com/en-us/answers/questions/1581988/why-is-the-blazor-css-isolation-not-working 

    https://stackoverflow.com/questions/74690885/passing-argument-to-onvalidsubmit-method
    OnValidSubmit="@(() => OnValidComment(post.Id))"

    This below table styling code did not work for me from 
    https://stackoverflow.com/questions/29229523/how-and-why-to-use-css-display-table-cell
    It differs from the working version in that the table columns are not defined 
    Also note that table cells of last column are empty, they are not rendered
    which is different than what is show in StackOverflow post.

    <div style="background-color:aquamarine; display:table">
        <div style="display:table-row">
            <div style="display:table-cell">
                Row 1,
                <br />Column 1
            </div>
            <div style="display:table-cell">Row 1, Column 2</div>
        </div>
        <div style="display:table-row">
            <div style="display:table-cell"> Row 2, <br />Column 1 </div>
            <div style="display:table-cell">Row 2, Column 2</div>
            <div style="display:table;background:#888888;"></div>
        </div>
    </div>

    // how to make InputSelect work?  https://www.pragimtech.com/blog/blazor/blazor-select-bind-database-data/
    // https://www.fluentui-blazor.net/Listbox
    // however this page, https://github.com/microsoft/fluentui-blazor/discussions/2386, 
    // says it won't set the SelectedItem if InteractiveServer render mode is not
    // used. Which cannot be used for this page.

    // https://stackoverflow.com/questions/74690885/passing-argument-to-onvalidsubmit-method

    // Confirmation Dialog implementation: https://www.pragimtech.com/blog/blazor/delete-confirmation-dialog-in-blazor/
    // Nope - that won't work for Static SSR rendering.
*@

<StatusMessage Message="@errorMessage" />

@code {
    private string? errorMessage;
    string? SelectedValue;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private List<ApplicationUser> users;

    // protected override async Task OnInitializedAsync()
    // {
    //     // https://stackoverflow.com/questions/21406973/wrapping-synchronous-code-into-asynchronous-call
    //     //var task = Task.Run(() => users = _UserManager.Users.ToList());
    //     //users = _UserManager.Users.ToList();        
    // }
    protected override void OnInitialized()
    {
        users = _UserManager.Users.ToList();
    }

    async Task EditUser(ApplicationUser selectUsr)
    {
        // from https://blazorhelpwebsite.com/ViewBlogPost/21

        //var user = await _UserManager.FindByIdAsync(SelectedUser.Id);
        if (selectUsr is not null && selectUsr.UserName is not null)
        {
            var newUri = _NavigationManager.ToAbsoluteUri("/Account/EditUser").AbsoluteUri;

            string userIdAsString = selectUsr.Id.ToString();

            newUri += "?" + $"SelectedUserId={userIdAsString}";

            _RedirectManager.RedirectToWithStatus(newUri, "ok", HttpContext);
        }
    }

    async Task DeleteUser(ApplicationUser selectUsr)
    {

        if (selectUsr is not null && selectUsr.UserName is not null)
        {
            var userName = selectUsr.UserName;

            var newUri = _NavigationManager.ToAbsoluteUri("/Account/ConfirmDeleteUser").AbsoluteUri;

            string userIdAsString = selectUsr.Id.ToString();

            newUri += "?" + $"SelectedUserId={userIdAsString}";

            _RedirectManager.RedirectToWithStatus(newUri, $"ARE YOU SURE YOU WANT TO DELETE USER: {selectUsr.UserName}", HttpContext);
        }
    }

    async Task EditRoles(ApplicationUser selectUsr)
    {

        if (selectUsr is not null && selectUsr.UserName is not null)
        {
            var userName = selectUsr.UserName;

            var newUri = _NavigationManager.ToAbsoluteUri("/Account/EditUserRoles").AbsoluteUri;

            string userIdAsString = selectUsr.Id.ToString();

            newUri += "?" + $"SelectedUserId={userIdAsString}";

            _RedirectManager.RedirectToWithStatus(newUri, $"Current User: {selectUsr.UserName}", HttpContext);
        }
    }

    bool CheckIfUserIsSuperAdmin(ApplicationUser user)
    {
        if (user is not null)
        {
            // asynchronous calls from synchronous code is dangerous.
            // By referencing '.Result' the process is a-waited already.
            // https://devblogs.microsoft.com/dotnet/should-i-expose-synchronous-wrappers-for-asynchronous-methods/
            try
            {
                List<string> rolesIDsList = user.Roles;

                foreach (var roleId in rolesIDsList)
                {
                    Task<ApplicationRole?> roleTask = _RoleManager.FindByIdAsync(roleId);

                    if (roleTask.Result is not null)
                    {
                        ApplicationRole role = roleTask.Result;
                        if (role.Name!.Equals(Constants.SUPERADMIN))
                        {
                            return true; // this works - BUT commenting it out to allow code below to run.
                        }
                    }
                }

                // // BELOW CODE DOES NOT WORK
                // Task<IList<string>> rolesListResult = _UserManager.GetRolesAsync(user); // HANGS here. UPDATE: added more statements and now it works sometimes while debugging!
                //
                // if (rolesListResult.Result is not null)
                // {
                //     IList<string> roles = rolesListResult.Result;
                //     if (roles.Contains(Constants.SUPERADMIN))
                //     {
                //         return true;
                //     }
                // }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
        }

        return false;
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

    }
}